# This workflow will install Python dependencies, and run tests.

name: Task Queue CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  validate:
    uses: ./.github/workflows/validate_code.yml

  publish-image-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
       PUBLISH_DOCKER_IMAGE: ${{ steps.export.outputs.publish }}
       PUBLISH_DOCKER_IMAGE_VALID: ${{ steps.export.outputs.valid }}
    steps:
      - uses: actions/checkout@v3
      - name: Main Version
        run: python -m pip install tomli && echo "MAIN_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")" >> $GITHUB_ENV
      - name: New Release Version Check
        run: python .github/workflows/verify_new_image.py ${MAIN_VERSION}
      - name: Export Results
        id: export
        env:
          publish_result: ${{ env.PUBLISH_DOCKER_IMAGE }}
          valid_check: ${{ env.PUBLISH_DOCKER_IMAGE_VALID }}
        run: |
            echo "publish=$publish_result" >> "$GITHUB_OUTPUT"
            echo "valid=$valid_check" >> "$GITHUB_OUTPUT"

  publish-docker-image:
    needs: [validate, publish-image-check]
    if: needs.publish-image-check.outputs.PUBLISH_DOCKER_IMAGE == needs.publish-image-check.outputs.PUBLISH_DOCKER_IMAGE_VALID
    permissions:
      packages: write
    uses: ./.github/workflows/publish_docker_image.yml

  create-git-tag:
    needs: [validate]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create and push tag
        run: |
          version=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Task Queue Version = ${version}"
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${version}
          git push origin ${version}
