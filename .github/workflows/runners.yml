# This workflow will install Python dependencies, and run tests.

name: Task Queue CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  pytest-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install minio
      run: |
        wget https://dl.min.io/server/minio/release/linux-amd64/archive/minio_20230518000536.0.0_amd64.deb -O minio.deb
        sudo dpkg -i minio.deb
    - name: Launch minio
      continue-on-error: true
      run: |
        mkdir ~/minio
        minio server ~/minio --console-address :9090 &!
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install .
    - name: Test with pytest
      run: |
        export AWS_ACCESS_KEY_ID=minioadmin
        export AWS_SECRET_ACCESS_KEY=minioadmin
        export FSSPEC_S3_ENDPOINT_URL=http://172.17.0.1:9000/
        pytest -vv

  ruff:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: chartboost/ruff-action@v1
      with:
        version: 0.4.10
        args: --extend-select=E

  pylint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install pylint
      run: python3.10 -m pip install pylint
    - name: Install Dependencies
      run: |
        python3.10 -m pip install .
        python3.10 -m pip install pytest
    # If you do not install dependencies then it will fail PyLint due to import-errors
    - name: Run pylint
      run: pylint data_pipeline

  version_check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: 'main'
    - name: Main Version
      run: echo "MAIN_VERSION=$(python setup.py --version)" >> $GITHUB_ENV
    - uses: actions/checkout@v3
    - name: Merge Version
      run: echo "MERGE_VERSION=$(python setup.py --version)" >> $GITHUB_ENV
    - name: Version Comparison
      run: python .github/workflows/verify_version.py ${MAIN_VERSION} ${MERGE_VERSION}
      
  publish-docker-image:
    needs: [version_check] # ADD THESE WHEN THEY PASS!!!, pylint, ruff, pytest-linux]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Login to ghcr.Io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build image
        run: |
          version=$(python setup.py --version)
          echo "Task Queue Version = ${version}"
          docker build . -t ghcr.io/afmc-majcom/task-queue/task-queue:latest
          docker run ghcr.io/afmc-majcom/task-queue/task-queue:latest controller --help 
          docker push ghcr.io/afmc-majcom/task-queue/task-queue:latest
          docker tag ghcr.io/afmc-majcom/task-queue/task-queue:latest ghcr.io/afmc-majcom/task-queue/task-queue:${version}
          docker push ghcr.io/afmc-majcom/task-queue/task-queue:${version}

  create-git-tag:
    needs: [pytest-linux] # ADD THESE WHEN THEY PASS!!!, pylint, ruff]
    #if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create and push tag
        run: |
          version=$(python setup.py --version)
          echo "Task Queue Version = ${version}"
          git tag ${version}
          git push origin ${version}