# This workflow will install Python dependencies, and run tests.

name: Task Queue CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  validate_code:
    uses: ./.github/workflows/validate_code.yml

  version_check:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: 'main'
    - name: Main Version
      run: echo "MAIN_VERSION=$(python setup.py --version)" >> $GITHUB_ENV
    - uses: actions/checkout@v3
    - name: Merge Version
      run: echo "MERGE_VERSION=$(python setup.py --version)" >> $GITHUB_ENV
    - name: Version Comparison
      run: python .github/workflows/verify_version.py ${MAIN_VERSION} ${MERGE_VERSION}

  publish-image-check:
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Main Version
        run: echo "MAIN_VERSION=$(python setup.py --version)" >> $GITHUB_ENV
      - name: New Release Version Check
        run: python .github/workflows/verify_new_image.py ${MAIN_VERSION}

  publish-docker-image:
    needs: [validate_code, publish-image-check]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Login to ghcr.Io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build image
        run: |
          version=$(python setup.py --version)
          echo "Task Queue Version = ${version}"
          docker build . -t ghcr.io/afmc-majcom/task-queue/task-queue:latest
          docker run ghcr.io/afmc-majcom/task-queue/task-queue:latest controller --help
          docker push ghcr.io/afmc-majcom/task-queue/task-queue:latest
          docker tag ghcr.io/afmc-majcom/task-queue/task-queue:latest ghcr.io/afmc-majcom/task-queue/task-queue:${version}
          docker push ghcr.io/afmc-majcom/task-queue/task-queue:${version}

  create-git-tag:
    needs: [pytest-linux, generic-workflow]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create and push tag
        run: |
          version=$(python setup.py --version)
          echo "Task Queue Version = ${version}"
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${version}
          git push origin ${version}
